/* eslint-env es6 */ /* eslint no-var: "error" */ /* global knimeViewRequest, knimeUpdateRequestStatus, knimeCancelRequest, knimePushSupported */window.initLazyLoading=function(){function a(a,b){this.progressListeners=[],this.monitor={},this.realPromise=b?b:new Promise(a)}const b=500,c=[];// const responseBuffer = [];
let d,e=0;if(!knimeService)throw new Error("KNIME service is not defined.");a.prototype={progress:function(a){return this.progressListeners.push(a),this.monitor&&a(this.monitor),this},then:function(b,c){let d=new a(null,this.realPromise.then(b,c));return d.progressListeners=this.progressListeners,d.monitor=this.monitor,d},catch:function(b){let c=new a(null,this.realPromise.catch(b));return c.progressListeners=this.progressListeners,c.monitor=this.monitor,c},finally:function(b){let c=new a(null,this.realPromise.finally(b));return c.progressListeners=this.progressListeners,c.monitor=this.monitor,c},updateProgress:function(a){this.monitor=a,this.progressListeners.forEach(function(b){b(a)})},cancel:function(a){if(this.monitor&&this.monitor.requestSequence)for(let b,d=0;d<c.length;d++)if(b=c[d],b.sequence===this.monitor.requestSequence){if(!b.notCancelable){let e=b.sequence;b.monitor&&b.monitor.id&&(e=b.monitor.id),e+="",knimeService.isInteractivityAvailable()?knimeService.getGlobalService().cancelViewRequest(window.frameElement.id,e,a):knimeCancelRequest(e),a||c.splice(d,1)}break}}};const f=function(){d=knimeService.isInteractivityAvailable()?knimeService.getGlobalService().isPushSupported():knimePushSupported()},g=function(a,b){// naive string comparison for performance reasons
    return JSON.stringify(a)===JSON.stringify(b)},h=function(a){var b=Number.MAX_SAFE_INTEGER;let c="undefined"==typeof b?Number.MAX_VALUE:b;return++a%c},i=function(){return e=h(e),e},j=function(a,b){var c=Math.min;let d;const e=a.monitor.id;if(d=knimeService.isInteractivityAvailable()?knimeService.getGlobalService().updateRequestStatus(window.frameElement.id,e):knimeUpdateRequestStatus(e),d&&("string"==typeof d&&(d=JSON.parse(d)),g(a.monitor,d)||knimeService.updateResponseMonitor(d),!(d.executionFinished&&d.responseAvailable||d.executionFailed||d.cancelled))){// slightly increase timeout every time up to a maximum of 5s, long running requests will
    // have fewer update calls
    const d=c(5e3,1.05*b);setTimeout(j,d,a,d)}},k=function(a){// initialize first update poll with the default
    setTimeout(j,b,a,b)},l=function(a,b){let d=c[a];if(d.sequence===b.sequence){c.splice(a,1);try{d.resolve(b)}catch(a){d.reject(a)}}},m=function(a,b){"undefined"==typeof d&&f();try{let c;c=knimeService.isInteractivityAvailable()?knimeService.getGlobalService().requestViewUpdate(window.frameElement.id,JSON.stringify(a),a.sequence):knimeViewRequest(JSON.stringify(a)),c||(c={}),"string"==typeof c&&(c=JSON.parse(c)),c.requestSequence||(c.requestSequence=a.sequence),b.monitor=c,b.promise&&b.promise.updateProgress(c),d||k(b)}catch(d){for(let b=0;b<c.length;b++)if(c[b].requestSequence===a.sequence){c.splice(b,1);break}b.reject&&b.reject(d)}};knimeService.requestViewUpdate=function(b,d,e){b.sequence=i();let f={sequence:b.sequence,monitor:{},notCancelable:e,preserveOrder:d},g=new a(function(a,b){f.resolve=a,f.reject=b});return f.promise=g,c.push(f),setTimeout(function(){m(b,f)},0),g},knimeService.updateResponseMonitor=function(a){let b=a.requestSequence;if("undefined"!=typeof b){a.executionFinished&&a.responseAvailable&&a.response&&knimeService.respondToViewRequest(a.response);for(let d,e=0;e<c.length;e++)if(d=c[e],d.sequence===b){a.executionFailed||a.cancelled?(d.reject(a.errorMessage),c.splice(e,1)):(d.monitor=a,d.promise&&d.promise.updateProgress(a));break}}},knimeService.respondToViewRequest=function(a){const b=a.sequence;if("undefined"!=typeof b)for(let d=0;d<c.length;d++){const e=c[d];if(e.sequence===b){if(e.preserveOrder){e.response=a;for(let a=0;a<c.length&&"undefined"!=typeof c[a].response;a++)l(a,c[a].response),a--}else l(d,a);break}}}},"undefined"==typeof KnimeInteractivity&&(window.KnimeInteractivity={respondToViewRequest:function(a){return knimeService.respondToViewRequest(a)},updateResponseMonitor:function(a){return knimeService.updateResponseMonitor(a)}});